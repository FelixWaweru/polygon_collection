// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";


/*                                                                                   

                                                                                                    
          ,:::::::      :::::,,      ,:::,,,        ,,,:::,::::::,,,          ::::::::,,,,,,,,,,    
          +???????SS,  :???????%?,   ,?????***,    :*?????%%???????**+;:,     ;????????????******+  
        ,+????????@@, ,*??????%@S,   ,???????#S,  :*??????#S?????????????*+;, ,?????????????????%@+ 
      ,;*?????????@#, +????????##,   ,????????@% ,*???????#@++S%????????????%?:*????%S%%%%%??????S@:
     :*???????????@#,;??????????@%   :????????%@++????????#@+:??????%S???????S#?????#@?:::+?????*S@%
   ,+?????????????@#:????????????@?  ;?????????#S?????????S@+,??????S@%*??????@#???*#@* ,;*?????S@@;
  :*??????%S??????@@*?????%??????%@* +?????????%??????????S@*,??????%@%*??????@@+;%%S#*;???????#@#; 
 :???????#@#??????@#??????@#?????*S@;+????????????????????%@% *?????%S???????#@#, ,,:+???????S@@*,  
,*??????#@%:*?????@%?????S@#*??????##*?????S???????%%?????%@S *??????**?????S@%,   ;*??????S@@?:    
;??????#@S, *?????@??????@@+,??????%@??????#%??????#%?????%@S +??????S%???????**,:*??????S@@*,      
+??????@@:  +*?%%%#??????@@, *??????#??????@#??????@S??????@# ;??????@#;???????@%*?????%@@S?++;:,   
;??????@#,    +****?????%@S  +??????S??????@@?????%@S??????@#,:??????@S*???????S??????S@@++?????#S; 
,*?????%#+      ,,,*?????#@,,*??????#??????@@:,????%???????@@,,??????%????????#??????%@@; +????%@@, 
 :*???????*++++**?*%??????%**?????*S@??????@@:      :??????@S++?????????????%@@???????S?++*????%@S  
  ,+??????????????%@%?????????????S@@??%%%S@@;      :??????#?????????????%S@@%;*??????*???????*%@%  
    :+*???????????%@@;*?????????S@@S;,:%?**+;,      :??????#???????%%S####%+:  ;???????%%%%%%%%S@S  
      ,:+*?%%SSSSSS%?, ,;*?%SS##S?;                  ,;*??%S%*SSSSS%%*+;,       ;;SSSS%%?*++++++++  
          ,,::::,,        ,,::,,                          ,,,,:,,,                :,,               
                                                                                                    
                                                                                                 
                                                                                          
 * @title COMBZ contract
 * @dev Extends ERC20 Token Standard basic implementation
 * Created by Felix Waweru aka Whyweru                                                                                       
*/


contract COMBZ is ERC20, Pausable, Ownable, ERC20Permit, ERC20Votes {

    uint256 public claimAmount = 100 * 10 ** decimals();
    address public cutzAddress;

    mapping(uint256 => bool) claimedTokens;

    constructor(address _cutzAddress) ERC20("COMBZ", "CMBZ") ERC20Permit("COMBZ") {
        cutzAddress = _cutzAddress;
    }

    // Claim COMBZ token for CUTZ holders
    function claim() public payable{
        // require(!paused, "The contract is paused!");
        require(msg.sender != owner(), "unable to claim as owner");
        uint _userBalance = ERC721Enumerable(cutzAddress).balanceOf(msg.sender);

        require(_userBalance > 0, "you need a CUTZ token to claim COMBZ");
        uint256 _mintable = 0;

        for(uint i; i < _userBalance; i++) {
            uint256 _tokenId = ERC721Enumerable(cutzAddress).tokenOfOwnerByIndex(msg.sender, i);

            if(!claimedTokens[_tokenId]) { // If token is unclaimed
                claimedTokens[_tokenId] = true;
                _mintable++;
            }
        }
        // Mint for the unclaimed tokens
        require(_mintable > 0, "unable to claim additional tokens");
        _mint(msg.sender, claimAmount * _mintable);
    }

    function setCutzAddress(address _address) external onlyOwner {
        cutzAddress = _address;
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(from, to, amount);
    }

    // The following functions are overrides required by Solidity.

    function _afterTokenTransfer(address from, address to, uint256 amount)
        internal
        override(ERC20, ERC20Votes)
    {
        super._afterTokenTransfer(from, to, amount);
    }

    function _mint(address to, uint256 amount)
        internal
        override(ERC20, ERC20Votes)
    {
        super._mint(to, amount);
    }

    function _burn(address account, uint256 amount)
        internal
        override(ERC20, ERC20Votes)
    {
        super._burn(account, amount);
    }
}
